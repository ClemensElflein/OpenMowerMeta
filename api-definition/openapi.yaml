openapi: "3.0.0"
info:
  version: 1.0.0
  title: OpenMower Device API
  description: REST API to manage the OpenMower
servers:
  - url: http://localhost:8080/v1
paths:
  '/setting/{id}':
    get:
      tags:
        - Setting
      summary: Get a setting by ID
      operationId: getSettingById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Setting'
    put:
      tags:
        - Setting
      summary: Update a setting by ID
      operationId: updateSettingById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
      responses:
        '200':
          description: Successful operation
    post:
      tags:
        - Setting
      summary: Create a setting by ID
      operationId: createSettingById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Setting'
      responses:
        '201':
          description: Created
    delete:
      tags:
        - Setting
      summary: Delete a setting by ID
      operationId: deleteSettingById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
  '/setting':
    get:
      tags:
        - Setting
      summary: Get existing settings
      operationId: getSettings
      responses:
        '200':
          description: List of existing settings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Setting'
  /container/{id}/status:
    get:
      tags:
        - Container
      operationId: getState
      summary: Returns the current ContainerState
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type:
              string
      responses:
        200:
          description: The current ContainerState
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerState"
  /container/{id}/action/{action}:
    post:
      tags:
        - Container
      operationId: executeAction
      summary: Start or stop the container
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: action
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully executed the requested operation. Returns the final ContainerState.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainerState"
  /container/{id}/custom-property/{key}:
    get:
      tags:
        - Container
      operationId: getCustomProperty
      summary: Return a custom property for a given container
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: key
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The property value
          content:
            application/json:
              schema:
                type: string
  /container/{id}/app-settings:
    post:
      tags:
        - Container
      operationId: saveAppSettingsById
      summary: Update the app settings for the given container
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyValue'
      responses:
        200:
          description: Image updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnyValue'
    get:
      tags:
        - Container
      operationId: getAppSettingsById
      summary: Return the settings for the app hosted by the container with given ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Image updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    $ref: '#/components/schemas/AnyValue'
                  schema:
                    type: string
                required:
                  - value
                  - schema
  /container/{id}/image:
    post:
      tags:
        - Container
      operationId: updateImageById
      summary: Update the image of a specific container
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageDescription'
      responses:
        200:
          description: Image updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDescription'
    get:
      tags:
        - Container
      operationId: getImageById
      summary: Retrieve the image of a specific container
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDescription'

components:
  schemas:
    ImageDescription:
      type: object
      properties:
        image:
          type: string
        imageVersion:
          type: string
      required:
        - image
        - imageVersion
    Setting:
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/AnyValue'
        description:
          type: string
      required:
        - key
    AnyValue:
      type: object
      additionalProperties: true
    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          nullable: false
    ExecutionState:
      type: string
      enum:
        - unknown
        - error
        - created
        - exited
        - starting
        - restarting
        - running
        - dead
        - paused
        - stopping
        - pulling

    ContainerState:
      type: object
      properties:
        executionState:
          $ref: '#/components/schemas/ExecutionState'
        runningImage:
          type: string
        runningImageVersion:
          type: string
        configuredImage:
          type: string
        configuredImageVersion:
          type: string
      required:
        - executionState
        - runningImage
        - runningImageVersion
        - configuredImage
        - configuredImageVersion
